Step 1

import pandas as pd

# Load the dataset
try:
    # Replace 'your_dataset.csv' with the path to your CSV file
    df = pd.read_csv('your_dataset.csv')
except FileNotFoundError:
    print("Dataset not found. Please check the file path.")
    
# Display the first few rows of the dataset
print("First 5 rows of the dataset:")
print(df.head())

# Explore the structure of the dataset
print("\nData types of columns:")
print(df.dtypes)

# Check for missing values
print("\nMissing values in each column:")
print(df.isnull().sum())

# Clean the dataset by filling missing values or dropping rows with missing data
# Example: Filling missing numerical values with the mean of the column
df.fillna(df.mean(), inplace=True)

# Verify if there are any missing values left
print("\nMissing values after cleaning:")
print(df.isnull().sum())

Step 2

# Basic statistics of numerical columns
print("\nBasic statistics of the numerical columns:")
print(df.describe())

# Perform groupings and compute the mean of a numerical column by a categorical column
# Example: Grouping by a 'species' column and computing the mean of 'sepal_length'
if 'species' in df.columns and 'sepal_length' in df.columns:
    grouped_data = df.groupby('species')['sepal_length'].mean()
    print("\nMean sepal length for each species:")
    print(grouped_data)

# Identify patterns or interesting findings
# Example: We could check for correlation between numerical columns
print("\nCorrelation matrix between numerical columns:")
print(df.corr())

Step 3
import matplotlib.pyplot as plt
import seaborn as sns

# Line Chart: Trends over time (assuming a time-related column exists, e.g., 'date' or 'time')
# Example: Line plot showing a trend over time (modify 'date' and 'value' as per your dataset)
plt.figure(figsize=(10, 6))
sns.lineplot(data=df, x='date', y='value')
plt.title('Trends Over Time')
plt.xlabel('Date')
plt.ylabel('Value')
plt.xticks(rotation=45)
plt.show()

# Bar Chart: Comparison of numerical values across categories
# Example: Bar plot comparing average sepal length per species
plt.figure(figsize=(8, 5))
sns.barplot(data=df, x='species', y='sepal_length')
plt.title('Average Sepal Length per Species')
plt.xlabel('Species')
plt.ylabel('Average Sepal Length')
plt.show()

# Histogram: Distribution of a numerical column
# Example: Histogram of 'sepal_length'
plt.figure(figsize=(8, 5))
sns.histplot(df['sepal_length'], kde=True, bins=20)
plt.title('Distribution of Sepal Length')
plt.xlabel('Sepal Length')
plt.ylabel('Frequency')
plt.show()

# Scatter Plot: Relationship between two numerical columns
# Example: Scatter plot of sepal length vs. petal length
plt.figure(figsize=(8, 5))
sns.scatterplot(data=df, x='sepal_length', y='petal_length')
plt.title('Sepal Length vs Petal Length')
plt.xlabel('Sepal Length')
plt.ylabel('Petal Length')
plt.show()


Step 4
# Example of findings and observations
print("\nFindings and Observations:")
print("1. The average sepal length varies across species, with Setosa having the smallest average sepal length.")
print("2. There seems to be a strong positive correlation between sepal length and petal length.")
print("3. The distribution of sepal lengths is slightly skewed to the right, suggesting most samples have smaller sepal lengths.")
print("4. The scatter plot of sepal length vs. petal length shows a clear linear relationship, indicating a strong correlation.")

